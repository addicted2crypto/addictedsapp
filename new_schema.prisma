// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    
}

model Post {
    id   String  @id @default(cuid())
    createdAt   DateTime @default(now())
    content     String @db.VarChar(140)
    link        String @default(cuid())
    authorId String

    @@index([authorId])
}



// model Profile {
    // id        String   @id @default(cuid())
    // userId    String   @unique
    // name      String   
    // imageUrl  String   @db.Text
    // createdAt DateTime @default(now())
    // updatedAt DateTime @updatedAt
    // servers     Server[]
    // members     Member[]
    // channels    Channel[]
// }

// Necessary for Next auth
// model Account {
    // id                String  @id @default(cuid())
    // userId            String
    // type              String
    // provider          String
    // providerAccountId String
    // refresh_token     String? // @db.Text
    // access_token      String? // @db.Text
    // expires_at        Int?
    // token_type        String?
    // scope             String?
    // id_token          String? // @db.Text
    // session_state     String?
    // user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
// 
    // @@unique([provider, providerAccountId])
// }

model Server {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         String       
    
}

// model User {
    // id            String    @id @default(cuid())
    // name          String?
    // email         String?   @unique
    // emailVerified DateTime?
    // image         String?
    // accounts      Account[]
    // sessions      Session[]
// }
// 
// model Account {
    // id          String
    // profileId   String
// 
// }
// 
// model Session {
    // id          String
    // name        String
    // imageUrl    String  @db.Text
    // profileId   String
    // createdAt   DateTime    @default(now())
    // updatedAt   DateTime    @updatedAt
// }

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Channel {
    id       String     @id @default(uuid())
    name     String     
    type     ChannelType @default(TEXT)
}




model Member {
    id      String      @id @default(uuid())


}

enum ChannelType {
    TEXT
    LINKS
    AUDIO
}
